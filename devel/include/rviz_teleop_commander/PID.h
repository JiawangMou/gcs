// Generated by gencpp from file rviz_teleop_commander/PID.msg
// DO NOT EDIT!


#ifndef RVIZ_TELEOP_COMMANDER_MESSAGE_PID_H
#define RVIZ_TELEOP_COMMANDER_MESSAGE_PID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rviz_teleop_commander
{
template <class ContainerAllocator>
struct PID_
{
  typedef PID_<ContainerAllocator> Type;

  PID_()
    : p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)  {
    }
  PID_(const ContainerAllocator& _alloc)
    : p_value(0.0)
    , i_value(0.0)
    , d_value(0.0)  {
  (void)_alloc;
    }



   typedef float _p_value_type;
  _p_value_type p_value;

   typedef float _i_value_type;
  _i_value_type i_value;

   typedef float _d_value_type;
  _d_value_type d_value;





  typedef boost::shared_ptr< ::rviz_teleop_commander::PID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rviz_teleop_commander::PID_<ContainerAllocator> const> ConstPtr;

}; // struct PID_

typedef ::rviz_teleop_commander::PID_<std::allocator<void> > PID;

typedef boost::shared_ptr< ::rviz_teleop_commander::PID > PIDPtr;
typedef boost::shared_ptr< ::rviz_teleop_commander::PID const> PIDConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rviz_teleop_commander::PID_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rviz_teleop_commander::PID_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rviz_teleop_commander

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rviz_teleop_commander': ['/home/moujiawang/gcs/src/rviz_teleop_commander/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rviz_teleop_commander::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rviz_teleop_commander::PID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rviz_teleop_commander::PID_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rviz_teleop_commander::PID_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rviz_teleop_commander::PID_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rviz_teleop_commander::PID_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rviz_teleop_commander::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adb7a9d75543c075dfce10e2d06a07d9";
  }

  static const char* value(const ::rviz_teleop_commander::PID_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadb7a9d75543c075ULL;
  static const uint64_t static_value2 = 0xdfce10e2d06a07d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::rviz_teleop_commander::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rviz_teleop_commander/PID";
  }

  static const char* value(const ::rviz_teleop_commander::PID_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rviz_teleop_commander::PID_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 p_value\n\
float32 i_value\n\
float32 d_value\n\
";
  }

  static const char* value(const ::rviz_teleop_commander::PID_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rviz_teleop_commander::PID_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p_value);
      stream.next(m.i_value);
      stream.next(m.d_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PID_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rviz_teleop_commander::PID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rviz_teleop_commander::PID_<ContainerAllocator>& v)
  {
    s << indent << "p_value: ";
    Printer<float>::stream(s, indent + "  ", v.p_value);
    s << indent << "i_value: ";
    Printer<float>::stream(s, indent + "  ", v.i_value);
    s << indent << "d_value: ";
    Printer<float>::stream(s, indent + "  ", v.d_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RVIZ_TELEOP_COMMANDER_MESSAGE_PID_H
