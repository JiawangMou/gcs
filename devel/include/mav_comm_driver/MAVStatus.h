// Generated by gencpp from file mav_comm_driver/MAVStatus.msg
// DO NOT EDIT!


#ifndef MAV_COMM_DRIVER_MESSAGE_MAVSTATUS_H
#define MAV_COMM_DRIVER_MESSAGE_MAVSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Imu.h>
#include <nav_msgs/Odometry.h>

namespace mav_comm_driver
{
template <class ContainerAllocator>
struct MAVStatus_
{
  typedef MAVStatus_<ContainerAllocator> Type;

  MAVStatus_()
    : header()
    , mode_id(0)
    , imu_data()
    , odom()
    , mid_servo_pwm(0)
    , left_servo_pwm(0)
    , right_servo_pwm(0)
    , throttle_pwm(0)
    , climb_pwm(0)
    , sys_status(0)
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , yaw_rate(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , board_time(0)
    , pid_id(0)
    , pid_ext_err(0.0)
    , pid_int_err(0.0)
    , ext_p_output(0.0)
    , ext_i_output(0.0)
    , ext_d_output(0.0)
    , int_p_output(0.0)
    , int_i_output(0.0)
    , int_d_output(0.0)  {
    }
  MAVStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode_id(0)
    , imu_data(_alloc)
    , odom(_alloc)
    , mid_servo_pwm(0)
    , left_servo_pwm(0)
    , right_servo_pwm(0)
    , throttle_pwm(0)
    , climb_pwm(0)
    , sys_status(0)
    , yaw_angle(0.0)
    , pitch_angle(0.0)
    , roll_angle(0.0)
    , yaw_rate(0.0)
    , pitch_rate(0.0)
    , roll_rate(0.0)
    , board_time(0)
    , pid_id(0)
    , pid_ext_err(0.0)
    , pid_int_err(0.0)
    , ext_p_output(0.0)
    , ext_i_output(0.0)
    , ext_d_output(0.0)
    , int_p_output(0.0)
    , int_i_output(0.0)
    , int_d_output(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_id_type;
  _mode_id_type mode_id;

   typedef  ::sensor_msgs::Imu_<ContainerAllocator>  _imu_data_type;
  _imu_data_type imu_data;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odom_type;
  _odom_type odom;

   typedef uint8_t _mid_servo_pwm_type;
  _mid_servo_pwm_type mid_servo_pwm;

   typedef uint8_t _left_servo_pwm_type;
  _left_servo_pwm_type left_servo_pwm;

   typedef uint8_t _right_servo_pwm_type;
  _right_servo_pwm_type right_servo_pwm;

   typedef uint8_t _throttle_pwm_type;
  _throttle_pwm_type throttle_pwm;

   typedef uint8_t _climb_pwm_type;
  _climb_pwm_type climb_pwm;

   typedef uint8_t _sys_status_type;
  _sys_status_type sys_status;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef float _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef float _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef float _pitch_rate_type;
  _pitch_rate_type pitch_rate;

   typedef float _roll_rate_type;
  _roll_rate_type roll_rate;

   typedef uint32_t _board_time_type;
  _board_time_type board_time;

   typedef uint8_t _pid_id_type;
  _pid_id_type pid_id;

   typedef float _pid_ext_err_type;
  _pid_ext_err_type pid_ext_err;

   typedef float _pid_int_err_type;
  _pid_int_err_type pid_int_err;

   typedef float _ext_p_output_type;
  _ext_p_output_type ext_p_output;

   typedef float _ext_i_output_type;
  _ext_i_output_type ext_i_output;

   typedef float _ext_d_output_type;
  _ext_d_output_type ext_d_output;

   typedef float _int_p_output_type;
  _int_p_output_type int_p_output;

   typedef float _int_i_output_type;
  _int_i_output_type int_i_output;

   typedef float _int_d_output_type;
  _int_d_output_type int_d_output;



  enum {
    FAULT_MODE = 0u,
    START_MODE = 8u,
    MANUAL_MODE = 16u,
    FLIGHT_MODE = 24u,
    TUNING_MODE = 56u,
  };


  typedef boost::shared_ptr< ::mav_comm_driver::MAVStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mav_comm_driver::MAVStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MAVStatus_

typedef ::mav_comm_driver::MAVStatus_<std::allocator<void> > MAVStatus;

typedef boost::shared_ptr< ::mav_comm_driver::MAVStatus > MAVStatusPtr;
typedef boost::shared_ptr< ::mav_comm_driver::MAVStatus const> MAVStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mav_comm_driver::MAVStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mav_comm_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mav_comm_driver': ['/home/moujiawang/gcs/src/mav_comm_driver/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mav_comm_driver::MAVStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mav_comm_driver::MAVStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mav_comm_driver::MAVStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b02f3350f8be0b668bda0c83dc2bc899";
  }

  static const char* value(const ::mav_comm_driver::MAVStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb02f3350f8be0b66ULL;
  static const uint64_t static_value2 = 0x8bda0c83dc2bc899ULL;
};

template<class ContainerAllocator>
struct DataType< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mav_comm_driver/MAVStatus";
  }

  static const char* value(const ::mav_comm_driver::MAVStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 mode_id\n\
\n\
# formatted sensor data\n\
sensor_msgs/Imu imu_data\n\
nav_msgs/Odometry odom\n\
\n\
# PWM output value\n\
uint8 mid_servo_pwm\n\
uint8 left_servo_pwm\n\
uint8 right_servo_pwm\n\
uint8 throttle_pwm\n\
uint8 climb_pwm\n\
\n\
# system status\n\
uint8 sys_status\n\
\n\
# origin data\n\
float32 yaw_angle\n\
float32 pitch_angle\n\
float32 roll_angle\n\
float32 yaw_rate\n\
float32 pitch_rate\n\
float32 roll_rate\n\
uint32 board_time # us\n\
\n\
# tuning mode value\n\
uint8 pid_id\n\
float32 pid_ext_err # degree * 100\n\
float32 pid_int_err # degree / s * 10\n\
float32 ext_p_output\n\
float32 ext_i_output\n\
float32 ext_d_output\n\
float32 int_p_output\n\
float32 int_i_output\n\
float32 int_d_output\n\
\n\
\n\
# modes\n\
uint8 FAULT_MODE = 0 # 0x00\n\
uint8 START_MODE = 8 # 0x08\n\
uint8 MANUAL_MODE = 16 # 0x10\n\
uint8 FLIGHT_MODE = 24 # 0x18\n\
uint8 TUNING_MODE = 56 # 0x38\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Imu\n\
# This is a message to hold data from an IMU (Inertial Measurement Unit)\n\
#\n\
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec\n\
#\n\
# If the covariance of the measurement is known, it should be filled in (if all you know is the \n\
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)\n\
# A covariance matrix of all zeros will be interpreted as \"covariance unknown\", and to use the\n\
# data a covariance will have to be assumed or gotten from some other source\n\
#\n\
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation \n\
# estimate), please set element 0 of the associated covariance matrix to -1\n\
# If you are interpreting this message, please check for a value of -1 in the first element of each \n\
# covariance matrix, and disregard the associated estimate.\n\
\n\
Header header\n\
\n\
geometry_msgs/Quaternion orientation\n\
float64[9] orientation_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 angular_velocity\n\
float64[9] angular_velocity_covariance # Row major about x, y, z axes\n\
\n\
geometry_msgs/Vector3 linear_acceleration\n\
float64[9] linear_acceleration_covariance # Row major x, y z \n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: nav_msgs/Odometry\n\
# This represents an estimate of a position and velocity in free space.  \n\
# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n\
# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n\
Header header\n\
string child_frame_id\n\
geometry_msgs/PoseWithCovariance pose\n\
geometry_msgs/TwistWithCovariance twist\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseWithCovariance\n\
# This represents a pose in free space with uncertainty.\n\
\n\
Pose pose\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/TwistWithCovariance\n\
# This expresses velocity in free space with uncertainty.\n\
\n\
Twist twist\n\
\n\
# Row-major representation of the 6x6 covariance matrix\n\
# The orientation parameters use a fixed-axis representation.\n\
# In order, the parameters are:\n\
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n\
float64[36] covariance\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
";
  }

  static const char* value(const ::mav_comm_driver::MAVStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode_id);
      stream.next(m.imu_data);
      stream.next(m.odom);
      stream.next(m.mid_servo_pwm);
      stream.next(m.left_servo_pwm);
      stream.next(m.right_servo_pwm);
      stream.next(m.throttle_pwm);
      stream.next(m.climb_pwm);
      stream.next(m.sys_status);
      stream.next(m.yaw_angle);
      stream.next(m.pitch_angle);
      stream.next(m.roll_angle);
      stream.next(m.yaw_rate);
      stream.next(m.pitch_rate);
      stream.next(m.roll_rate);
      stream.next(m.board_time);
      stream.next(m.pid_id);
      stream.next(m.pid_ext_err);
      stream.next(m.pid_int_err);
      stream.next(m.ext_p_output);
      stream.next(m.ext_i_output);
      stream.next(m.ext_d_output);
      stream.next(m.int_p_output);
      stream.next(m.int_i_output);
      stream.next(m.int_d_output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MAVStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mav_comm_driver::MAVStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mav_comm_driver::MAVStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_id);
    s << indent << "imu_data: ";
    s << std::endl;
    Printer< ::sensor_msgs::Imu_<ContainerAllocator> >::stream(s, indent + "  ", v.imu_data);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
    s << indent << "mid_servo_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mid_servo_pwm);
    s << indent << "left_servo_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_servo_pwm);
    s << indent << "right_servo_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_servo_pwm);
    s << indent << "throttle_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.throttle_pwm);
    s << indent << "climb_pwm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.climb_pwm);
    s << indent << "sys_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sys_status);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "roll_angle: ";
    Printer<float>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "yaw_rate: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "pitch_rate: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_rate);
    s << indent << "roll_rate: ";
    Printer<float>::stream(s, indent + "  ", v.roll_rate);
    s << indent << "board_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.board_time);
    s << indent << "pid_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pid_id);
    s << indent << "pid_ext_err: ";
    Printer<float>::stream(s, indent + "  ", v.pid_ext_err);
    s << indent << "pid_int_err: ";
    Printer<float>::stream(s, indent + "  ", v.pid_int_err);
    s << indent << "ext_p_output: ";
    Printer<float>::stream(s, indent + "  ", v.ext_p_output);
    s << indent << "ext_i_output: ";
    Printer<float>::stream(s, indent + "  ", v.ext_i_output);
    s << indent << "ext_d_output: ";
    Printer<float>::stream(s, indent + "  ", v.ext_d_output);
    s << indent << "int_p_output: ";
    Printer<float>::stream(s, indent + "  ", v.int_p_output);
    s << indent << "int_i_output: ";
    Printer<float>::stream(s, indent + "  ", v.int_i_output);
    s << indent << "int_d_output: ";
    Printer<float>::stream(s, indent + "  ", v.int_d_output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAV_COMM_DRIVER_MESSAGE_MAVSTATUS_H
